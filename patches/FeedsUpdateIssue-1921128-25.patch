diff --git a/plugins/FeedsFieldCollectionProcessor.inc b/plugins/FeedsFieldCollectionProcessor.inc
index 8b25cbe..907a41f 100644
--- a/plugins/FeedsFieldCollectionProcessor.inc
+++ b/plugins/FeedsFieldCollectionProcessor.inc
@@ -14,7 +14,7 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
   public function entityType() {
     return 'field_collection_item';
   }
-  
+
   /**
    * Implements parent::entityInfo().
    */
@@ -52,45 +52,51 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
    * Save a entity.
    */
   public function entitysave($entity) {
-
-    $values = (array)$entity;
+    $values = array();
+    foreach ($entity as $key => $item) {
+      $values[str_replace('*', '', $key)] = $item;
+    }
     $skip_host_save = FALSE;
     $field_collection_item = entity_create('field_collection_item', $values);
-	  
-    if (!empty($entity->hostEntityId)) {
-      $hostEntity_array = entity_load($this->config['host_entity_type'], array($entity->hostEntityId));
+
+    if (method_exists($entity,'hostentityId')) {
+      $entityid = $entity->hostEntityId();
+    }
+    else {
+      $entityid = NULL;
+    }
+    if (!empty($entityid)) {
+      $hostEntity_array = entity_load($this->config['host_entity_type'], array($entity->hostEntityId()));
       $hostEntity = reset($hostEntity_array);
       $field_collection_item->setHostEntity($this->config['host_entity_type'], $hostEntity);
       //update by set item_id
-	 
-      if ($this->config['update_existing'] == FEEDS_UPDATE_EXISTING && isset($field_collection_item->identifier_field) && isset($this->config['identifier_field_name'])) {
-       
-	   $query = new EntityFieldQuery();
+
+      if ($this->config['update_existing'] == FEEDS_UPDATE_EXISTING && isset($field_collection_item->{$this->config['identifier_field_name']}[LANGUAGE_NONE][0]['value']) && isset($this->config['identifier_field_name'])) {
+        $query = new EntityFieldQuery();
         $query->entityCondition('entity_type', 'field_collection_item');
         $query->entityCondition('bundle', $this->config['field_name']);
         $items  = isset($hostEntity->{$this->config['field_name']}[LANGUAGE_NONE]) ? $hostEntity->{$this->config['field_name']}[LANGUAGE_NONE] : array();
         $ids = field_collection_field_item_to_ids($items);
-		if(!empty($ids)){
+        if (!empty($ids)) {
           $query->entityCondition('entity_id', $ids, 'IN');
-		
-          $query->fieldCondition($this->config['identifier_field_name'], 'value', $field_collection_item->identifier_field);
+
+          $query->fieldCondition($this->config['identifier_field_name'], 'value', $field_collection_item->{$this->config['identifier_field_name']}[LANGUAGE_NONE][0]['value']);
           $result = $query->execute();
-		
+
           list($EntityType, $data) = each($result);
           $field_collection_item->item_id = $data ? key($data) : FALSE;
-		}
+        }
         if (!empty($field_collection_item->item_id)) {
           $field_collection_item->is_new = NULL;
-		  $old_field_collection_item = field_collection_item_load($field_collection_item->item_id);
-		  $field_collection_item->revision_id = $old_field_collection_item->revision_id;
+          $old_field_collection_item = field_collection_item_load($field_collection_item->item_id);
+          $field_collection_item->revision_id = $old_field_collection_item->revision_id;
           $skip_host_save = TRUE;
         }
         //drupal_set_message('123:'.$field_collection_item->item_id);
       }
-	  
 
     }
-	
+
     $field_collection_item->save($skip_host_save);
   }
 
@@ -98,7 +104,10 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
    * Delete a series of entities.
    */
   protected function entityDeleteMultiple($ids) {
-    entity_delete_multiple($this->entityType(), $ids);
+    $entities = field_collection_item_load_multiple($ids);
+    foreach ($entities as $entity) {
+      $entity->delete();
+    }
   }
   /**
    * Override parent::configDefaults().
@@ -167,7 +176,6 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
    */
   //public function setTargetElement(FeedsSource $source, $target_item, $target_element, $value, $mapping) {
   public function setTargetElement(FeedsSource $source, $target_item, $target_element, $value) {
-    
     switch ($target_element) {
       case 'host_entity_guid':
         $query = new EntityFieldQuery();
@@ -180,7 +188,11 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
         }
         $result = $query->execute();
         list($hostEntityType, $data) = each($result);
-        $target_item->hostEntityId = $data ? key($data) : FALSE;
+
+        // @TODO: Verify this check is necessary.
+        if (!method_exists($target_item,'hostentityId')) {
+          $target_item->hostEntityId = $data ? key($data) : FALSE;
+        }
         break;
       default:
         parent::setTargetElement($source, $target_item, $target_element, $value);
@@ -227,4 +239,4 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
 
     return $targets;
   }
-}
\ No newline at end of file
+}
