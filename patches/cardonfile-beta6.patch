diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.api.php b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.api.php
new file mode 100644
index 00000000..885b69d9
--- /dev/null
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.api.php
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Card on File module.
+ */
+
+/**
+ * Allows you to act when a card is created.
+ *
+ * @param \CommerceCardOnFile $card
+ *   The card entity being created.
+ */
+function hook_commerce_cardonfile_insert(CommerceCardOnFile $card) {
+  // No example.
+}
+
+/**
+ * Allows you to act when a card is updated.
+ *
+ * @param \CommerceCardOnFile $card
+ *   The card entity being updated.
+ */
+function hook_commerce_cardonfile_update(CommerceCardOnFile $card) {
+  // No example.
+}
+
+/**
+ * Allows you to act when a card is being deleted.
+ *
+ * @param \CommerceCardOnFile $card
+ *   The card entity being deleted.
+ */
+function hook_commerce_cardonfile_delete(CommerceCardOnFile $card) {
+  // No example.
+}
+
+/**
+ * Allows other modules to alter Card on File's checkout pane alter.
+ *
+ * @param array $payment_details
+ *   The payment details form array.
+ * @param $form
+ *   The entire form array.
+ * @param $form
+ *   The entire form state array.
+ */
+function hook_commerce_cardonfile_checkout_pane_form_alter(&$payment_details, $form, $form_state) {
+  // No example.
+}
+
+/**
+* Implements hook_commerce_cardonfile_payment_terminal_form_alter().
+ *
+ * Allows alteration of admin payment terminal form elements after
+ * they've been processed by commerce_cardonfile.
+ *
+ * @param $form
+ *   The entire form array.
+ * @param $form
+ *   The entire form state array.
+ */
+function commerce_cardonfile_commerce_cardonfile_payment_terminal_form_alter(&$form, &$form_state) {
+  // No example provided.
+}
+
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.info b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.info
index a9145226..182ebe93 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.info
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.info
@@ -22,9 +22,9 @@ files[] = includes/views/handlers/commerce_cardonfile_handler_field_card_exp.inc
 files[] = includes/views/handlers/commerce_cardonfile_handler_field_card_operations.inc
 files[] = includes/views/handlers/commerce_cardonfile_plugin_argument_validate_owner.inc
 
-; Information added by Drupal.org packaging script on 2014-06-18
-version = "7.x-2.0-beta5"
+; Information added by Drupal.org packaging script on 2017-03-29
+version = "7.x-2.0-beta6"
 core = "7.x"
 project = "commerce_cardonfile"
-datestamp = "1403088228"
+datestamp = "1490805789"
 
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.install b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.install
index f03f8602..e5152033 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.install
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.install
@@ -211,6 +211,17 @@ function commerce_cardonfile_update_7103(&$sandbox) {
 }
 
 /**
+ * Add the Customer Billing Profile field to the card on file entity.
+ */
+function commerce_cardonfile_update_7104(&$sandbox = NULL) {
+  // No longer needed, fields are now created on hook_flush_caches().
+}
+
+/**
+* ADDED BY PATCH https://betheoutlier.beanstalkapp.com/on-the-floor/browse/git/docroot/sites/atdove.org/patches/cardonfile.patch
+*/
+
+/**
 * Adds the order_id column to the {commerce_cardonfile} table.
 */
 function commerce_cardonfile_update_7205() {
@@ -224,3 +235,10 @@ function commerce_cardonfile_update_7205() {
   return t('Added order_id column to commerce_cardonfile table.');
 }
 
+//added to run a update function added by the contributed module during an upgrade
+function commerce_cardonfile_update_7206() {
+  commerce_cardonfile_update_7104();
+}
+/**
+* END ADDED BY PATCH https://betheoutlier.beanstalkapp.com/on-the-floor/browse/git/docroot/sites/atdove.org/patches/cardonfile.patch
+*/
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.module b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.module
index f1c4c1de..d47f3005 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.module
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.module
@@ -87,21 +87,16 @@ function commerce_cardonfile_menu() {
     }
   }
 
-  $items['user/%user/cards/%commerce_cardonfile'] = array(
+  $items['user/%user/cards/%commerce_cardonfile/edit'] = array(
     'title callback' => 'commerce_cardonfile_card_title',
     'title arguments' => array(3),
     'page callback' => 'commerce_cardonfile_card_form_page',
     'page arguments' => array('update', 3, 1),
     'access callback' => 'commerce_cardonfile_access',
     'access arguments' => array('update', 3),
-    'file' => 'includes/commerce_cardonfile.pages.inc',
     'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
-  );
-  $items['user/%user/cards/%commerce_cardonfile/edit'] = array(
-    'title' => 'Edit',
-    'type' => MENU_DEFAULT_LOCAL_TASK,
     'weight' => -10,
-    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
+    'file' => 'includes/commerce_cardonfile.pages.inc',
   );
   $items['user/%user/cards/%commerce_cardonfile/delete'] = array(
     'title' => 'Delete',
@@ -109,7 +104,6 @@ function commerce_cardonfile_menu() {
     'page arguments' => array('commerce_cardonfile_delete_form', 3),
     'access callback' => 'commerce_cardonfile_access',
     'access arguments' => array('delete', 3),
-    'type' => MENU_LOCAL_TASK,
     'context' => MENU_CONTEXT_INLINE,
     'weight' => 5,
     'file' => 'includes/commerce_cardonfile.pages.inc',
@@ -361,15 +355,13 @@ function commerce_cardonfile_add_any_access($account) {
   foreach ($create_implements as $method_id => $method_function) {
     $payment_method_instances = _commerce_cardonfile_payment_method_instances($method_id);
     foreach ($payment_method_instances as $instance_id => $payment_method) {
-//      if($payment_method IS WHAT WE WANT Zv86....){    
-        $new_card = commerce_cardonfile_new(array(
-          'instance_id' => $instance_id,
-          'payment_method' => $payment_method['method_id'],
-        ));
-        if (commerce_cardonfile_access('create', $new_card, $account)) {
-          return TRUE;
-        }
-//      }
+      $new_card = commerce_cardonfile_new(array(
+        'instance_id' => $instance_id,
+        'payment_method' => $payment_method['method_id'],
+      ));
+      if (commerce_cardonfile_access('create', $new_card, $account)) {
+        return TRUE;
+      }
     }
   }
 
@@ -457,7 +449,6 @@ function commerce_cardonfile_access($op = 'view', $card = NULL, $account = NULL)
     return TRUE;
   }
 
-
   // ALLOW access to create new cards to any user with the 'create own card data'
   // permission when they are accessing to their own profile.
   if ($op == 'create' && user_access('create own card data') && $account->uid == $user->uid) {
@@ -702,7 +693,7 @@ function commerce_cardonfile_form_alter(&$form, &$form_state, $form_id) {
   );
 
   // Allow others to alter this alter
-  drupal_alter('commerce_cardonfile_checkout_pane_form', $form['commerce_payment']['payment_details'], $form);
+  drupal_alter('commerce_cardonfile_checkout_pane_form', $form['commerce_payment']['payment_details'], $form, $form_state);
 
   // Add submit handler
   if (isset($form['buttons']['continue'])) {
@@ -750,6 +741,95 @@ function commerce_cardonfile_commerce_checkout_form_submit($form, &$form_state)
 }
 
 /**
+ * Implements hook_form_FORM_ID_alter().
+ *
+ * Adds card on file options to the admin payment terminal for card on file
+ * enabled payment methods.
+ */
+function commerce_cardonfile_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
+  $payment_method = isset($form_state['payment_method']) ? $form_state['payment_method'] : NULL;
+  $form['payment_terminal']['#prefix'] = '<div id="payment-terminal-ajax-wrapper">';
+  $form['payment_terminal']['#suffix'] = '</div>';
+
+  if (!_commerce_cardonfile_capable_payment_method_check($payment_method) || (isset($payment_method['settings']['cardonfile']) && !$payment_method['settings']['cardonfile'])) {
+    return;
+  }
+
+  // Load existing active cards for the payment method instance and user.
+  $stored_cards = commerce_cardonfile_load_multiple_by_uid($form_state['order']->uid, $payment_method['instance_id']);
+
+  // Build options form
+  $cardonfile_options_form = array();
+  $instance_default_card_id = NULL;
+
+  // If have stored cards ...
+  if (!empty($stored_cards)) {
+    $valid_cards = array_filter($stored_cards, 'commerce_cardonfile_validate_card_expiration');
+
+    // If have un-expired cards ...
+    if (!empty($valid_cards)) {
+      // get options list with labels
+      $card_option_element_type = variable_get('commerce_cardonfile_selector', 'radios');
+      $card_options = commerce_cardonfile_element_options_list($valid_cards, $card_option_element_type);
+
+      // determine default option
+      $card_options_default_value = key($card_options);
+      foreach (array_keys($card_options) as $card_id) {
+        if (isset($valid_cards[$card_id]) && !empty($valid_cards[$card_id]->instance_default)) {
+          $card_options_default_value = $instance_default_card_id = $card_id;
+
+          // move instance default to the top of the list
+          $card_option_label = $card_options[$card_id];
+          unset($card_options[$card_id]);
+          $card_options = array($card_id => $card_option_label) + $card_options;
+          break;
+        }
+      }
+
+      // create options element
+      $cardonfile_options_form = array(
+        '#type' => $card_option_element_type,
+        '#title' => t('Select a stored card'),
+        '#options' => $card_options,
+        '#default_value' => $card_options_default_value,
+        '#weight' => -10,
+        '#ajax' => array(
+          'callback' => 'commerce_cardonfile_payment_terminal_ajax',
+          'wrapper' => 'payment-terminal-ajax-wrapper',
+        ),
+      );
+    }
+  }
+
+  // update form with options
+  if (!empty($cardonfile_options_form)) {
+    $form['payment_terminal']['payment_details']['cardonfile'] = $cardonfile_options_form;
+
+    // If the current value for the card selection element is not to use
+    // a different credit card, then hide the credit card form elements.
+    if (empty($form_state['values']['payment_details']['cardonfile']) || $form_state['values']['payment_details']['cardonfile'] !== 'new') {
+      $form['payment_terminal']['payment_details']['credit_card']['#access'] = FALSE;
+    }
+  }
+  else {
+    $form['payment_terminal']['payment_details']['cardonfile'] = array(
+      '#type' => 'value',
+      '#value' => 'new',
+    );
+  }
+
+  // Allow other modules to alter the card on file form elements.
+  drupal_alter('commerce_cardonfile_payment_terminal_form', $form, $form_state);
+}
+
+/**
+ * Ajax callback for payment terminal card on file operations.
+ */
+function commerce_cardonfile_payment_terminal_ajax($form, &$form_state) {
+  return $form['payment_terminal'];
+}
+
+/**
  * Returns an options array for selecting a card on file during checkout
  *
  * @param $stored_cards
@@ -1110,6 +1190,11 @@ function commerce_cardonfile_payment_method_implements($callback) {
     foreach ($payment_methods as $method_id => $payment_method) {
       foreach ($available_callbacks as $available_callback) {
         if (!empty($payment_method['cardonfile'][$available_callback])) {
+          // Include the payment method file if specified.
+          if (!empty($payment_method['file'])) {
+            $parts = explode('.', $payment_method['file']);
+            module_load_include(array_pop($parts), $payment_method['module'], implode('.', $parts));
+          }
           $func = $payment_method['cardonfile'][$available_callback];
           if (function_exists($func)) {
             $cache[$available_callback][$method_id] = $func;
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.rules.inc b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.rules.inc
index 854cce23..121f92cd 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.rules.inc
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/commerce_cardonfile.rules.inc
@@ -52,7 +52,7 @@ function commerce_cardonfile_rules_event_info() {
     ),
   );
   $events['commerce_cardonfile_charge_success'] = array(
-    'label' => t('After a successful chargeing of an order'),
+    'label' => t('After a successful charging of an order'),
     'group' => t('Commerce Card on File'),
     'access callback' => 'commerce_order_rules_access',
     'variables' => array(
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.entity.inc b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.entity.inc
index 159ef140..0e7d7bb2 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.entity.inc
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.entity.inc
@@ -148,27 +148,31 @@ class CommerceCardOnFile extends Entity {
     }
 
     // Perform the save.
-    parent::save();
-
-    // If the card is now instance_default, remove the flag from other cards.
-    $is_update = isset($original);
-    $value_changed = $is_update && $this->instance_default != $original->instance_default;
-    if ($this->instance_default && (!$is_update || $value_changed)) {
-      $query = new EntityFieldQuery();
-      $query->entityCondition('entity_type', 'commerce_cardonfile');
-      $query->entityCondition('entity_id', $this->card_id, '<>');
-      $query->propertyCondition('instance_id', $this->instance_id);
-      $query->propertyCondition('uid', $this->uid);
-      $query->propertyCondition('instance_default', TRUE);
-      $result = $query->execute();
-      if (isset($result['commerce_cardonfile'])) {
-        $card_ids = array_keys($result['commerce_cardonfile']);
-        $other_cards = commerce_cardonfile_load_multiple($card_ids);
-        foreach ($other_cards as $other_card) {
-          $other_card->instance_default = 0;
-          commerce_cardonfile_save($other_card);
+    $save_result = parent::save();
+
+    if ($save_result !== FALSE) {
+      // If the card is now instance_default, remove the flag from other cards.
+      $is_update = isset($original);
+      $value_changed = $is_update && $this->instance_default != $original->instance_default;
+      if ($this->instance_default && (!$is_update || $value_changed)) {
+        $query = new EntityFieldQuery();
+        $query->entityCondition('entity_type', 'commerce_cardonfile');
+        $query->entityCondition('entity_id', $this->card_id, '<>');
+        $query->propertyCondition('instance_id', $this->instance_id);
+        $query->propertyCondition('uid', $this->uid);
+        $query->propertyCondition('instance_default', TRUE);
+        $result = $query->execute();
+        if (isset($result['commerce_cardonfile'])) {
+          $card_ids = array_keys($result['commerce_cardonfile']);
+          $other_cards = commerce_cardonfile_load_multiple($card_ids);
+          foreach ($other_cards as $other_card) {
+            $other_card->instance_default = 0;
+            commerce_cardonfile_save($other_card);
+          }
         }
       }
     }
+
+    return $save_result;
   }
 }
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.pages.inc b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.pages.inc
index 29bb8073..2fd23ad6 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.pages.inc
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/commerce_cardonfile.pages.inc
@@ -118,7 +118,7 @@ function commerce_cardonfile_card_form($form, &$form_state, $op, $card) {
       'exp_month' => $card->card_exp_month,
       'exp_year' => $card->card_exp_year,
     );
-  }  
+  }
   $form += commerce_payment_credit_card_form($fields, $defaults);
   if ($op == 'update') {
     $form['credit_card']['type']['#access'] = FALSE;
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/commerce_cardonfile.views_default.inc b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/commerce_cardonfile.views_default.inc
index fad2bf51..e864b864 100755
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/commerce_cardonfile.views_default.inc
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/commerce_cardonfile.views_default.inc
@@ -172,6 +172,24 @@ function commerce_cardonfile_views_default_views() {
   $handler->display->display_options['menu']['weight'] = '0';
   $handler->display->display_options['menu']['name'] = 'management';
   $handler->display->display_options['menu']['context'] = 0;
+  $translatables['commerce_card_on_file_user_cards'] = array(
+    t('Master'),
+    t('Stored cards'),
+    t('more'),
+    t('Apply'),
+    t('Reset'),
+    t('Sort by'),
+    t('Asc'),
+    t('Desc'),
+    t('Credit Card'),
+    t('Name on Card'),
+    t('Default'),
+    t('Expires On'),
+    t('Operations'),
+    t('All'),
+    t('Page'),
+  );
+
   $views[$view->name] = $view;
 
   return $views;
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/handlers/commerce_cardonfile_handler_field_card_operations.inc b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/handlers/commerce_cardonfile_handler_field_card_operations.inc
index ca982c92..bea7e4e8 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/handlers/commerce_cardonfile_handler_field_card_operations.inc
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/includes/views/handlers/commerce_cardonfile_handler_field_card_operations.inc
@@ -36,22 +36,35 @@ class commerce_cardonfile_handler_field_card_operations extends views_handler_fi
 
   function render($values) {
     $card_id = $this->get_value($values, 'card_id');
+    $card = commerce_cardonfile_load($card_id);
     $uid = $this->get_value($values, 'uid');
 
     // Get the operations links.
-    $links = menu_contextual_links('commerce-cardonfile', 'user/' . $uid . '/cards', array($card_id));
-
-    if (!empty($links)) {
-      // Add the destination to the links if specified.
-      if ($this->options['add_destination']) {
-        foreach ($links as $id => &$link) {
-          // Only include the destination for the edit and delete forms.
-          if (in_array($id, array('commerce-cardonfile-edit', 'commerce-cardonfile-delete'))) {
-            $link['query'] = drupal_get_destination();
-          }
-        }
+    // Hardcoded because the Edit and Delete links are not under a common
+    // parent, to allow methods to provide delete functionality without
+    // providing edit functionality.
+    $links = array(
+      'commerce-cardonfile-edit' => array(
+        'title' => t('Edit'),
+        'href' => 'user/' . $uid . '/cards/' . $card_id . '/edit',
+        'access' => commerce_cardonfile_access('update', $card),
+      ),
+      'commerce-cardonfile-delete' => array(
+        'title' => t('Delete'),
+        'href' => 'user/' . $uid . '/cards/' . $card_id . '/delete',
+        'access' => commerce_cardonfile_access('delete', $card),
+      ),
+    );
+    foreach ($links as $id => &$link) {
+      if (!$link['access']) {
+        unset($links[$id]);
       }
+      elseif ($this->options['add_destination']) {
+        $link['query'] = drupal_get_destination();
+      }
+    }
 
+    if (!empty($links)) {
       drupal_add_css(drupal_get_path('module', 'commerce_cardonfile') . '/theme/commerce_cardonfile.admin.css');
       return theme('links', array('links' => $links, 'attributes' => array('class' => array('links', 'inline', 'operations'))));
     }
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/modules/recurring/commerce_cardonfile_recurring.info b/docroot/sites/atdove.org/modules/commerce_cardonfile/modules/recurring/commerce_cardonfile_recurring.info
index e22deb21..cae0ee4a 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/modules/recurring/commerce_cardonfile_recurring.info
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/modules/recurring/commerce_cardonfile_recurring.info
@@ -4,9 +4,9 @@ package = Commerce (contrib)
 core = 7.x
 dependencies[] = commerce_cardonfile
 dependencies[] = commerce_recurring
-; Information added by Drupal.org packaging script on 2014-06-18
-version = "7.x-2.0-beta5"
+; Information added by Drupal.org packaging script on 2017-03-29
+version = "7.x-2.0-beta6"
 core = "7.x"
 project = "commerce_cardonfile"
-datestamp = "1403088228"
+datestamp = "1490805789"
 
diff --git a/docroot/sites/atdove.org/modules/commerce_cardonfile/tests/commerce_cardonfile_testing/commerce_cardonfile_testing.info b/docroot/sites/atdove.org/modules/commerce_cardonfile/tests/commerce_cardonfile_testing/commerce_cardonfile_testing.info
index 9e29bdfa..7b79baf4 100644
--- a/docroot/sites/atdove.org/modules/commerce_cardonfile/tests/commerce_cardonfile_testing/commerce_cardonfile_testing.info
+++ b/docroot/sites/atdove.org/modules/commerce_cardonfile/tests/commerce_cardonfile_testing/commerce_cardonfile_testing.info
@@ -4,9 +4,9 @@ package = Testing
 dependencies[] = commerce_cardonfile
 core = 7.x
 
-; Information added by Drupal.org packaging script on 2014-06-18
-version = "7.x-2.0-beta5"
+; Information added by Drupal.org packaging script on 2017-03-29
+version = "7.x-2.0-beta6"
 core = "7.x"
 project = "commerce_cardonfile"
-datestamp = "1403088228"
+datestamp = "1490805789"
 
